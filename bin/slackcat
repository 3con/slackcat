#!/usr/bin/env ruby

require 'httparty'
require 'trollop'

class Slackcat
  include HTTParty
  base_uri 'https://slack.com/api'

  def initialize(token)
    @token = token
  end

  ## get a channel, group, im or user list
  def get_objects(method, key)
    self.class.get("/#{method}", query: { token: @token }).tap do |response|
      raise "error retrieving #{thing} list: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end.fetch(key)
  end

  def channels
    @channels ||= get_objects('channels.list', 'channels')
  end

  def groups
    @groups ||= get_objects('groups.list', 'groups')
  end

  def ims
    @ims ||= get_objects('im.list', 'ims')
  end

  def users
    @users ||= get_objects('users.list', 'members')
  end

  ## translate a username into an IM id
  def im_for_user(username)
    user = users.find do |user|
      user['name'] == username
    end
    ims.find do |im|
      im['user'] == user['id']
    end
  end

  def upload(params)
    self.class.post('/files.upload', body: params.merge({token: @token})).tap do |response|
      raise "error uploading file: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end
  end

end

opts = Trollop::options do
  opt :token,           'Slack API token',        type: :string, short: 'k', default: ENV.fetch('SLACK_TOKEN', nil)
  opt :channels,        'Channels to share',      type: :string, short: 'c', default: ''
  opt :groups,          'Groups to share',        type: :string, short: 'g', default: ''
  opt :users,           'Users (DMs) to share',   type: :string, short: 'u', default: ''
  opt :filetype,        'File type identifier',   type: :string, short: 't'
  opt :title,           'Title of file',          type: :string, short: 'T'
  opt :filename,        'Filename of file',       type: :string, short: 'n'
  opt :initial_comment, 'Initial comment to add', type: :string, short: 'i'
end

## get this after opts parsed out of ARGV
opts[:filename] ||= ARGV.first

raise 'set slack API token using SLACK_TOKEN or -k option' unless opts[:token]
slack = Slackcat.new(opts[:token])

channels = opts[:channels].split(/[\s,]+/).map do |name|
  slack.channels.find { |channel| channel['name'] == name }.fetch('id')
end

groups = opts[:groups].split(/[\s,]+/).map do |name|
  slack.groups.find { |group| group['name'] == name }.fetch('id')
end

ims = opts[:users].split(/[\s,]+/).map do |name|
  slack.im_for_user(name).fetch('id')
end

params = {
  content:         ARGF.read,
  filetype:        opts[:filetype],
  filename:        opts[:filename],
  title:           opts[:title],
  initial_comment: opts[:initial_comment],
  channels:        (channels + groups + ims).join(","),
}.select { |_, value| value }

slack.upload(params)
